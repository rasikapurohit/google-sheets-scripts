function addEventsToSheetOwnerCalendarWithColors() {
  const sheetName = "SProblems"; // Name of the sheet
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const fileId = spreadsheet.getId();
  const file = DriveApp.getFileById(fileId);
  const ownerEmail = file.getOwner().getEmail(); // Get the owner's email

  // Access the owner's calendar
  const calendar = CalendarApp.getCalendarById(ownerEmail);

  const data = sheet.getDataRange().getValues();
  const formulas = sheet.getRange(2, 1, data.length - 1, 1).getFormulas(); // Get all formulas in column A
  const richTextValues = sheet.getRange(2, 1, data.length - 1, 1).getRichTextValues(); // Get all rich text values in column A

  const today = new Date();
  today.setHours(0, 0, 0, 0); // Reset time to compare dates

  const eventColors = {
    "Very Easy": CalendarApp.EventColor.PALE_BLUE,
    "Easy": CalendarApp.EventColor.MAUVE,
    "Medium": CalendarApp.EventColor.YELLOW,
    "Hard": CalendarApp.EventColor.PALE_RED,
  };

  const eventsToCreate = []; // Collect events to create in bulk

  // Loop through the rows of the sheet (starting from the 2nd row to skip the header)
  for (let i = 1; i < data.length; i++) {
    const eventDescription = data[i][0];
    const problemLevel = data[i][1];
    const eventColor = eventColors[problemLevel] || CalendarApp.EventColor.DEFAULT;

    let url = null;
    const formula = formulas[i - 1][0];
    if (formula && formula.startsWith('=HYPERLINK')) {
      url = formula.match(/"([^"]+)"/)?.[1]; // Extract URL from HYPERLINK formula
    } else {
      const richTextValue = richTextValues[i - 1][0];
      if (richTextValue) {
        url = richTextValue.getLinkUrl();
      }
    }

    for (let j = 1; j < 14; j++) {
      const eventDate = new Date(data[i][j]);
      eventDate.setHours(0, 0, 0, 0); // Reset time to compare dates

      if (eventDate.toDateString() === today.toDateString()) {
        const eventName = `Scaler|${problemLevel} â†’ ${eventDescription}`;
        eventsToCreate.push({
          name: eventName,
          date: eventDate,
          description: url,
          color: eventColor,
        });
      }
    }
  }

  // Create events in bulk
  eventsToCreate.forEach((event) => {
    try {
      const calendarEvent = calendar.createAllDayEvent(event.name, event.date, {
        description: event.description,
      });
      calendarEvent.setColor(event.color);
      Logger.log(`Event added to owner's calendar: ${event.name} on ${event.date}`);
    } catch (error) {
      Logger.log(`Error adding event to calendar: ${error.message}`);
    }
  });
}
